//--------------------------------------------------------------------------------------------------
// <auto-generated>
//
//     This code was generated by code generator tool.
//
//     To customize the code use your own partial class. For more info about how to use and customize
//     the generated code see the documentation at http://docs.kentico.com.
//
// </auto-generated>
//--------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

using CMS;
using CMS.Base;
using CMS.Helpers;
using CMS.DataEngine;
using CMS.DocumentEngine.Types.Fs;
using CMS.DocumentEngine;

[assembly: RegisterDocumentType(Content.CLASS_NAME, typeof(Content))]

namespace CMS.DocumentEngine.Types.Fs
{
    /// <summary>
    /// Represents a content item of type Content.
    /// </summary>
    public partial class Content : TreeNode
    {
        #region "Constants and variables"

        /// <summary>
        /// The name of the data class.
        /// </summary>
        public const string CLASS_NAME = "fs.content";


        /// <summary>
        /// The instance of the class that provides extended API for working with Content fields.
        /// </summary>
        private readonly ContentFields mFields;

        #endregion


        #region "Properties"

        /// <summary>
        /// ContentID.
        /// </summary>
        [DatabaseIDField]
        public int ContentID
        {
            get
            {
                return ValidationHelper.GetInteger(GetValue("ContentID"), 0);
            }
            set
            {
                SetValue("ContentID", value);
            }
        }


        /// <summary>
        /// Title.
        /// </summary>
        [DatabaseField]
        public string ContentTitle
        {
            get
            {
                return ValidationHelper.GetString(GetValue("ContentTitle"), "");
            }
            set
            {
                SetValue("ContentTitle", value);
            }
        }


        /// <summary>
        /// Text.
        /// </summary>
        [DatabaseField]
        public string ContentText
        {
            get
            {
                return ValidationHelper.GetString(GetValue("ContentText"), "");
            }
            set
            {
                SetValue("ContentText", value);
            }
        }


        /// <summary>
        /// Gets an object that provides extended API for working with Content fields.
        /// </summary>
        [RegisterProperty]
        public ContentFields Fields
        {
            get
            {
                return mFields;
            }
        }


        /// <summary>
        /// Provides extended API for working with Content fields.
        /// </summary>
        [RegisterAllProperties]
        public partial class ContentFields : AbstractHierarchicalObject<ContentFields>
        {
            /// <summary>
            /// The content item of type Content that is a target of the extended API.
            /// </summary>
            private readonly Content mInstance;


            /// <summary>
            /// Initializes a new instance of the <see cref="ContentFields" /> class with the specified content item of type Content.
            /// </summary>
            /// <param name="instance">The content item of type Content that is a target of the extended API.</param>
            public ContentFields(Content instance)
            {
                mInstance = instance;
            }


            /// <summary>
            /// ContentID.
            /// </summary>
            public int ID
            {
                get
                {
                    return mInstance.ContentID;
                }
                set
                {
                    mInstance.ContentID = value;
                }
            }


            /// <summary>
            /// Title.
            /// </summary>
            public string Title
            {
                get
                {
                    return mInstance.ContentTitle;
                }
                set
                {
                    mInstance.ContentTitle = value;
                }
            }


            /// <summary>
            /// Text.
            /// </summary>
            public string Text
            {
                get
                {
                    return mInstance.ContentText;
                }
                set
                {
                    mInstance.ContentText = value;
                }
            }
        }

        #endregion


        #region "Constructors"

        /// <summary>
        /// Initializes a new instance of the <see cref="Content" /> class.
        /// </summary>
        public Content() : base(CLASS_NAME)
        {
            mFields = new ContentFields(this);
        }

        #endregion
    }
}